version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: halalcentral-postgres
    environment:
      POSTGRES_DB: halalcentral
      POSTGRES_USER: halalcentral
      POSTGRES_PASSWORD: halalcentral123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d
    networks:
      - halalcentral-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U halalcentral"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: halalcentral-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - halalcentral-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Medusa Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: halalcentral-backend
    environment:
      DATABASE_URL: postgresql://halalcentral:halalcentral123@postgres:5432/halalcentral
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-here
      COOKIE_SECRET: your-super-secret-cookie-key-here
      NODE_ENV: development
      BACKEND_URL: http://localhost:9000
      FRONTEND_URL: http://localhost:3000
      STORE_CORS: http://localhost:3000,http://localhost:8000
      ADMIN_CORS: http://localhost:3000,http://localhost:7001
    ports:
      - "9000:9000"
      - "7001:7001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - halalcentral-network
    command: npm run dev

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: halalcentral-frontend
    environment:
      NEXT_PUBLIC_MEDUSA_BACKEND_URL: http://localhost:9000
      NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: your-google-maps-api-key
      NEXT_PUBLIC_SWISH_MERCHANT_ID: your-merchant-id
      NODE_ENV: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - halalcentral-network
    command: npm run dev

  # MinIO for file storage (S3 compatible)
  minio:
    image: minio/minio:latest
    container_name: halalcentral-minio
    environment:
      MINIO_ROOT_USER: halalcentral
      MINIO_ROOT_PASSWORD: halalcentral123
    ports:
      - "9001:9000"
      - "9002:9001"
    volumes:
      - minio_data:/data
    networks:
      - halalcentral-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: halalcentral-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - halalcentral-network

  # Elasticsearch for search (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: halalcentral-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - halalcentral-network
    profiles:
      - search

  # Kibana for Elasticsearch management (optional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: halalcentral-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - halalcentral-network
    profiles:
      - search

  # Mailhog for email testing in development
  mailhog:
    image: mailhog/mailhog:latest
    container_name: halalcentral-mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - halalcentral-network
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  halalcentral-network:
    driver: bridge
